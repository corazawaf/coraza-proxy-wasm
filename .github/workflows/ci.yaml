name: CI
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/*.md"
      - "LICENSE"
  pull_request:
  workflow_dispatch:

env:
  GO_VERSION: 1.18
  TINYGO_VERSION: 0.25.0
  WABT_VERSION: 1.0.29

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install TinyGo and wabt
        run: |
          gh release download v${TINYGO_VERSION} -p '*.linux-amd64.tar.gz' -D ~ -R github.com/tinygo-org/tinygo
          tar -xf ~/tinygo${TINYGO_VERSION}.linux-amd64.tar.gz  -C $HOME
          echo "$HOME/tinygo/bin" >> $GITHUB_PATH

          gh release download ${WABT_VERSION} -p '*-ubuntu.tar.gz' -D ~ -R github.com/WebAssembly/wabt
          tar -xf ~/wabt-${WABT_VERSION}-ubuntu.tar.gz  -C $HOME
          echo "$HOME/wabt-${WABT_VERSION}/bin" >> $GITHUB_PATH
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache TinyGo build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/tinygo
          key: ${{ runner.os }}-tinygo-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-tinygo-

      - name: Run code checks
        run: go run mage.go lint

      - name: Build WASM filter
        run: go run mage.go build

      - name: Run unit tests
        run: go run mage.go coverage

      - name: Run e2e tests
        run: go run mage.go e2e

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
