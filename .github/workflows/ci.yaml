name: CI
on:
  push:
    branches:
      - main
    tags:
      - "*"
    paths-ignore:
      - "**/*.md"
      - "LICENSE"
  pull_request:
  workflow_dispatch:

env:
  GO_VERSION: 1.19
  TINYGO_VERSION: 0.27.0
  # Test against latest two releases and latest dev
  ENVOY_IMAGES: >
    envoyproxy/envoy:v1.26-latest
    envoyproxy/envoy:v1.25-latest
    envoyproxy/envoy-dev:latest

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install TinyGo
        run: |
          gh release download v${TINYGO_VERSION} -p '*.linux-amd64.tar.gz' -D ~ -R github.com/tinygo-org/tinygo
          tar -xf ~/tinygo${TINYGO_VERSION}.linux-amd64.tar.gz  -C $HOME
          echo "$HOME/tinygo/bin" >> $GITHUB_PATH
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache TinyGo build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/tinygo
          key: ${{ runner.os }}-tinygo-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-tinygo-

      - name: Run code checks
        run: go run mage.go lint

      - name: Build WASM filter
        run: go run mage.go build

      - name: Run unit tests
        run: go run mage.go coverage

      - name: Run e2e tests against the example
        shell: bash
        run: >
          for image in $ENVOY_IMAGES; do
              echo "Running e2e with Envoy image $image"
              ENVOY_IMAGE=$image go run mage.go e2e
          done

      - name: Run regression tests (ftw)
        run: go run mage.go ftw

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ftw-envoy-logs
          path: build/ftw-envoy.log

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}

      - name: Docker meta busybox
        id: meta-busybox
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
          flavor: |
            suffix=-busybox

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push busybox based image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-busybox.outputs.tags }}
          labels: ${{ steps.meta-busybox.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=busybox:1.36-uclibc

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
