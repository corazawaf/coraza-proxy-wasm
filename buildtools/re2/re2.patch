diff --git a/util/mutex.h b/util/mutex.h
index 4b6772a..10e6f57 100644
--- a/util/mutex.h
+++ b/util/mutex.h
@@ -26,17 +26,6 @@
 #endif
 #endif
 
-#if defined(MUTEX_IS_WIN32_SRWLOCK)
-typedef SRWLOCK MutexType;
-#elif defined(MUTEX_IS_PTHREAD_RWLOCK)
-#include <pthread.h>
-#include <stdlib.h>
-typedef pthread_rwlock_t MutexType;
-#else
-#include <shared_mutex>
-typedef std::shared_mutex MutexType;
-#endif
-
 namespace re2 {
 
 class Mutex {
@@ -55,8 +44,6 @@ class Mutex {
   inline void WriterUnlock() { Unlock(); } // Release a lock from WriterLock()
 
  private:
-  MutexType mutex_;
-
   // Catch the error of writing Mutex when intending MutexLock.
   Mutex(Mutex *ignored);
 
@@ -66,12 +53,12 @@ class Mutex {
 
 #if defined(MUTEX_IS_WIN32_SRWLOCK)
 
-Mutex::Mutex()             : mutex_(SRWLOCK_INIT) { }
+Mutex::Mutex() { }
 Mutex::~Mutex()            { }
-void Mutex::Lock()         { AcquireSRWLockExclusive(&mutex_); }
-void Mutex::Unlock()       { ReleaseSRWLockExclusive(&mutex_); }
-void Mutex::ReaderLock()   { AcquireSRWLockShared(&mutex_); }
-void Mutex::ReaderUnlock() { ReleaseSRWLockShared(&mutex_); }
+void Mutex::Lock()         { }
+void Mutex::Unlock()       { }
+void Mutex::ReaderLock()   { }
+void Mutex::ReaderUnlock() { }
 
 #elif defined(MUTEX_IS_PTHREAD_RWLOCK)
 
@@ -80,12 +67,12 @@ void Mutex::ReaderUnlock() { ReleaseSRWLockShared(&mutex_); }
     if ((fncall) != 0) abort(); \
   } while (0)
 
-Mutex::Mutex()             { SAFE_PTHREAD(pthread_rwlock_init(&mutex_, NULL)); }
-Mutex::~Mutex()            { SAFE_PTHREAD(pthread_rwlock_destroy(&mutex_)); }
-void Mutex::Lock()         { SAFE_PTHREAD(pthread_rwlock_wrlock(&mutex_)); }
-void Mutex::Unlock()       { SAFE_PTHREAD(pthread_rwlock_unlock(&mutex_)); }
-void Mutex::ReaderLock()   { SAFE_PTHREAD(pthread_rwlock_rdlock(&mutex_)); }
-void Mutex::ReaderUnlock() { SAFE_PTHREAD(pthread_rwlock_unlock(&mutex_)); }
+Mutex::Mutex()             { }
+Mutex::~Mutex()            { }
+void Mutex::Lock()         { }
+void Mutex::Unlock()       { }
+void Mutex::ReaderLock()   { }
+void Mutex::ReaderUnlock() { }
 
 #undef SAFE_PTHREAD
 
@@ -93,10 +80,10 @@ void Mutex::ReaderUnlock() { SAFE_PTHREAD(pthread_rwlock_unlock(&mutex_)); }
 
 Mutex::Mutex()             { }
 Mutex::~Mutex()            { }
-void Mutex::Lock()         { mutex_.lock(); }
-void Mutex::Unlock()       { mutex_.unlock(); }
-void Mutex::ReaderLock()   { mutex_.lock_shared(); }
-void Mutex::ReaderUnlock() { mutex_.unlock_shared(); }
+void Mutex::Lock()         { }
+void Mutex::Unlock()       { }
+void Mutex::ReaderLock()   { }
+void Mutex::ReaderUnlock() { }
 
 #endif
 
