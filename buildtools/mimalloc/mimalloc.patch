diff --git a/include/mimalloc-atomic.h b/include/mimalloc-atomic.h
index 7ad5da5..3029d97 100644
--- a/include/mimalloc-atomic.h
+++ b/include/mimalloc-atomic.h
@@ -325,7 +325,7 @@ static inline void mi_atomic_yield(void) {
 #elif defined(__wasi__)
 #include <sched.h>
 static inline void mi_atomic_yield(void) {
-  sched_yield();
+  // sched_yield();
 }
 #else
 #include <unistd.h>
diff --git a/src/alloc-override.c b/src/alloc-override.c
index e29cb4b..19f6822 100644
--- a/src/alloc-override.c
+++ b/src/alloc-override.c
@@ -256,7 +256,7 @@ int   reallocarr(void* p, size_t count, size_t size)    { return mi_reallocarr(p
 void* memalign(size_t alignment, size_t size)           { return mi_memalign(alignment, size); }
 void* _aligned_malloc(size_t alignment, size_t size)    { return mi_aligned_alloc(alignment, size); }
 
-#if defined(__GLIBC__) && defined(__linux__)
+#if defined(__GLIBC__) && defined(__linux__) || defined(__wasi__)
   // forward __libc interface (needed for glibc-based Linux distributions)
   void* __libc_malloc(size_t size)                      MI_FORWARD1(mi_malloc,size)
   void* __libc_calloc(size_t count, size_t size)        MI_FORWARD2(mi_calloc,count,size)
@@ -268,6 +268,7 @@ void* _aligned_malloc(size_t alignment, size_t size)    { return mi_aligned_allo
   void* __libc_pvalloc(size_t size)                     { return mi_pvalloc(size); }
   void* __libc_memalign(size_t alignment, size_t size)  { return mi_memalign(alignment,size); }
   int   __posix_memalign(void** p, size_t alignment, size_t size) { return mi_posix_memalign(p,alignment,size); }
+  void* aligned_alloc(size_t alignment, size_t size) { return mi_aligned_alloc(alignment, size); }
 #endif
 
 #ifdef __cplusplus
